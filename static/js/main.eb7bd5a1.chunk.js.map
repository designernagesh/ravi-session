{"version":3,"sources":["components/TopStory.js","components/Container.js","components/UsingCSS.js","components/Form.js","App.js","serviceWorker.js","index.js","images/img1.jpg"],"names":["TopStory","props","src","alt","content","Container","className","img1","UsingCSS","style","color","backgroundColor","padding","fontSize","lineHeight","margin","border","borderRadius","Form","inputHandler","e","setState","inputName","target","value","console","log","state","name","count","clickHandler","bind","this","onClick","type","placeholder","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"8LAgBeA,G,kBAbE,SAACC,GACd,OACI,kBAAC,WAAD,KACI,4BACI,4BACI,yBAAKC,IAAKD,EAAMC,IAAKC,IAAKF,EAAME,MAChC,2BAAKF,EAAMG,c,gBC4BhBC,EAjCG,WACd,OACI,yBAAKC,UAAU,cACX,2CACA,kBAAC,EAAD,CACAJ,IAAI,2HACJC,IAAI,YACJC,QAAQ,8EAER,kBAAC,EAAD,CACAF,IAAKK,IACLJ,IAAI,YACJC,QAAQ,yEAER,kBAAC,EAAD,CACAF,IAAI,2HACJC,IAAI,YACJC,QAAQ,4EAER,kBAAC,EAAD,CACAF,IAAI,2HACJC,IAAI,YACJC,QAAQ,8EAER,kBAAC,EAAD,CACAF,IAAI,2HACJC,IAAI,YACJC,QAAQ,gFCPLI,MAtBf,WAYI,OACI,oCAGG,uBAAGC,MAdQ,CACdC,MAAO,QACPC,gBAAiB,SACjBC,QAAS,OACTC,SAAU,OACVC,WAAY,OACZC,OAAQ,OACRC,OAAQ,gBACRC,aAAc,wBAMX,2S,mCCuCIC,E,kDArDX,aAAc,IAAD,8BACT,gBAyBJC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,UAAWF,EAAEG,OAAOC,QAExBC,QAAQC,IAAK,EAAKC,MAAML,YA3BxB,EAAKK,MAAQ,CACTL,UAAW,GACXM,KAAM,QACNC,MAAO,GAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBATX,E,2DAoBTN,QAAQC,IAAI,cACZM,KAAKX,SAAS,CACVQ,MAAOG,KAAKL,MAAME,MAAQ,M,+BAY9B,OACI,oCACI,sCAEA,gCAAOG,KAAKL,MAAMC,KAAlB,MAA6BI,KAAKL,MAAME,OAExC,4BAAQI,QAAUD,KAAKF,aAAexB,UAAU,wBAAhD,cALJ,IAK+F,6BAAM,6BAEjG,2BAAO4B,KAAK,OAAOC,YAAY,kBAAkBX,MAAQQ,KAAKL,MAAML,UAAYc,SAAWJ,KAAKb,aAAeb,UAAU,iBAP7H,IAO+I,6BAE3I,4BAAM0B,KAAKL,MAAML,WAEjB,4BAAQW,QAAUD,KAAKb,aAAeb,UAAU,4BAAhD,8B,GAhDG+B,aC+BJC,MAxBf,WACE,OACE,6BAEE,yBAAKhC,UAAU,kBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,YACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,YACb,kBAAC,EAAD,WCZQiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.eb7bd5a1.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n//import './TopStory.css'\r\n\r\nconst TopStory = (props) => {\r\n    return(\r\n        <Fragment>\r\n            <ul>\r\n                <li>\r\n                    <img src={props.src} alt={props.alt} />\r\n                    <p>{ props.content }</p>\r\n                </li>\r\n            </ul>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TopStory","import React from 'react'\r\nimport TopStory from './TopStory'\r\nimport img1 from '../images/img1.jpg'\r\n\r\nconst Container = () => {\r\n    return(\r\n        <div className=\"container1\">\r\n            <h2>Top Stories</h2>\r\n            <TopStory \r\n            src=\"https://c.ndtvimg.com/2020-03/dqqfmbs8_coronaviruspregnantwoman_120x90_29_March_20.jpg?output-quality=80&downsize=105:79\" \r\n            alt=\"ndtvimage\" \r\n            content=\"Pregnant Woman Turned Back By Delhi Cops As Migrants Struggle To Get Home\" />\r\n\r\n            <TopStory\r\n            src={img1}\r\n            alt=\"ndtvimage\"\r\n            content=\"2 Men From Nagaland Denied Entry To Mysuru Store Amid COVID-19 Scare\" />\r\n\r\n            <TopStory \r\n            src=\"https://c.ndtvimg.com/2020-03/dqqfmbs8_coronaviruspregnantwoman_120x90_29_March_20.jpg?output-quality=80&downsize=105:79\" \r\n            alt=\"ndtvimage\" \r\n            content=\"Walking Home From Delhi For Over 200 km, Delivery Agent Dies On Highway\" />\r\n\r\n            <TopStory \r\n            src=\"https://c.ndtvimg.com/2020-03/dqqfmbs8_coronaviruspregnantwoman_120x90_29_March_20.jpg?output-quality=80&downsize=105:79\" \r\n            alt=\"ndtvimage\" \r\n            content=\"Pregnant Woman Turned Back By Delhi Cops As Migrants Struggle To Get Home\" />\r\n\r\n            <TopStory \r\n            src=\"https://c.ndtvimg.com/2020-03/dqqfmbs8_coronaviruspregnantwoman_120x90_29_March_20.jpg?output-quality=80&downsize=105:79\" \r\n            alt=\"ndtvimage\" \r\n            content=\"Pregnant Woman Turned Back By Delhi Cops As Migrants Struggle To Get Home\" />       \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container\r\n","import React from 'react'\r\n\r\nfunction UsingCSS(){\r\n\r\n    const fontColor = {\r\n        color: 'black',\r\n        backgroundColor: 'yellow',\r\n        padding: '50px',\r\n        fontSize: '18px',\r\n        lineHeight: '30px',\r\n        margin: '50px',\r\n        border: '5px solid red',\r\n        borderRadius: '50px 10px 50px 10px'   // Top Right Bottom Left\r\n    }\r\n    return(\r\n        <>\r\n           { /* <h1 style={{color: \"red\"}}>Simple Form</h1>  */ }\r\n           \r\n           <p style={fontColor}>Since the inline CSS is written in a JavaScript object, properties with two names, like background-color, must be written with camel case syntax:\r\n           Since the inline CSS is written in a JavaScript object, properties with two names, like background-color, must be written with camel case syntax:  </p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UsingCSS","import React, { Component } from 'react'\r\n\r\nclass Form extends Component{\r\n    \r\n    constructor(){\r\n        super()\r\n\r\n        this.state = {\r\n            inputName: '',\r\n            name: 'Count',\r\n            count: 0  \r\n        }\r\n\r\n        this.clickHandler = this.clickHandler.bind(this)        \r\n    } \r\n\r\n    /* clickHandler = () => {\r\n        console.log('Clicked It')\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n    } */\r\n\r\n    clickHandler(){        \r\n        console.log('Clicked It')\r\n        this.setState({\r\n            count: this.state.count + 1\r\n        })\r\n    }\r\n\r\n    inputHandler = (e) => {\r\n        this.setState({\r\n            inputName: e.target.value            \r\n        })\r\n        console.log( this.state.inputName )\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <>\r\n                <h1> Form </h1>\r\n\r\n                <h2> { this.state.name } : { this.state.count }</h2>\r\n\r\n                <button onClick={ this.clickHandler } className=\"btn btn-primary mb-4\"> Click It </button> <br /><br />\r\n\r\n                <input type=\"text\" placeholder=\"Enter Your Name\" value={ this.state.inputName } onChange={ this.inputHandler } className=\"form-control\" /> <br />\r\n\r\n                <h2>{ this.state.inputName }</h2>\r\n\r\n                <button onClick={ this.inputHandler } className=\"btn btn-danger btn-block\"> FInd the Input Vaue </button>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React from 'react'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport Container from './components/Container'\nimport UsingCSS from './components/UsingCSS'\nimport Form from './components/Form'\n\nfunction App() {\n  return (\n    <div>\n\n      <div className=\"container-flud\">\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <Container />\n          </div>\n\n          <div className=\"col-md-3\">\n            <UsingCSS />\n          </div>\n\n          <div className=\"col-md-6\">\n            <Form />\n          </div>\n        </div>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/img1.63de6e45.jpg\";"],"sourceRoot":""}